package selenium;import java.util.HashMap;import java.util.Map;import org.testng.annotations.Test;import org.testng.asserts.SoftAssert;public class MergeCounter {		public void AddMap(HashMap<Integer, Integer> addMap,int arr[], int i)	{		if(addMap.containsKey(arr[i]))		{			addMap.put(arr[i], addMap.get(arr[i])+1);		}		else			addMap.put(arr[i], 1);	}			public HashMap<Integer, Integer> MergeCounterEx(int a[], int b[])	{		int size = a.length+b.length;		int j=0;		HashMap<Integer, Integer> hash = new HashMap<Integer, Integer>();		for(int i=0;i<size;i++)		{			if(i < a.length)			{				AddMap(hash,a,i);			}			else			{				AddMap(hash,b,j);				j++;			}		}				return hash;	}		@Test	public void MergerTest()	{				int [] a = {1,2,1,5};		int [] b = {1,3,3,4,5,7};		int [] c = {3,1,2,1,2,1};		int i = 0;		SoftAssert sa = new SoftAssert();						 		MergeCounter oMerger = new MergeCounter();				HashMap<Integer, Integer> FinalHash = oMerger.MergeCounterEx(a,b);		for(Map.Entry<Integer, Integer> entry : FinalHash.entrySet())		{			System.out.println(entry.getKey() + " : " +entry.getValue());			sa.assertEquals(entry.getValue().intValue(),c[i]);			i++;		}		sa.assertAll();	}}